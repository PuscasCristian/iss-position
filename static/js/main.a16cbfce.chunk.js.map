{"version":3,"sources":["comps/MapComp.js","App.js","index.js"],"names":["Icon","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","Dot","MapComp","useState","previousLocation","setPreviousLocation","issData","setissData","zoom","location","setLocation","markers","setMarkers","popup","setPopup","useEffect","getData","a","fetch","response","json","issPos","console","log","setInterval","checkInput","lat","latitude","lng","longitude","altitude","toFixed","speed","velocity","visibility","currentLoc","id","timestamp","previousLoc","Map","className","center","TileLayer","attribution","url","Marker","position","Popup","map","index","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIMA,EAAOC,IAAEC,KAAK,CAChBC,QAAS,0DACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,MAEhBC,EAAMN,IAAEC,KAAK,CACfC,QACI,wEACJC,SAAU,CAAC,EAAG,GACdC,WAAY,CAAC,EAAG,GAChBC,YAAa,CAAC,GAAI,MAgGPE,EA7FC,WAAO,IAAD,EAC8BC,mBAAS,IADvC,mBACXC,EADW,KACOC,EADP,OAEYF,qBAFZ,mBAEXG,EAFW,KAEFC,EAFE,OAGcJ,mBAAS,CACrCK,KAAM,IAJQ,mBAGXC,EAHW,KAGDC,EAHC,OAMYP,qBANZ,mBAMXQ,EANW,KAMFC,EANE,OAOQT,qBAPR,mBAOXU,EAPW,KAOJC,EAPI,KA+DlB,OAtDAC,qBAAU,WACN,IAAMC,EAAO,uCAAG,8BAAAC,EAAA,+EAEeC,MACnB,kDAHI,cAEFC,EAFE,gBAKaA,EAASC,OALtB,OAKFC,EALE,OAMRd,EAAWc,GANH,kDAQRC,QAAQC,IAAI,OAAZ,MARQ,0DAAH,qDAYbC,aAAY,WACRR,MACD,QACJ,IACHD,qBAAU,WACN,IAAMU,EAAa,WACXnB,IACAM,EAAW,CACPc,IAAKpB,EAAQqB,SACbC,IAAKtB,EAAQuB,YAEjBnB,EAAY,CACRD,SAAU,CACNiB,IAAKpB,EAAQqB,SACbC,IAAKtB,EAAQuB,aAGrBf,EAAS,CACLgB,SAAUxB,EAAQwB,SAASC,QAAQ,GACnCC,MAAO1B,EAAQ2B,SAASF,QAAQ,GAChCG,WAAY5B,EAAQ4B,eAgBhC,OAFAT,IAVoB,WAChB,GAAInB,EAAS,CACT,IAAI6B,EAAa,CACbT,IAAKpB,EAAQqB,SACbC,IAAKtB,EAAQuB,UACbO,GAAI9B,EAAQ+B,WAEhBhC,EAAoB,GAAD,mBAAKD,GAAL,CAAuB+B,MAIlDG,GACO,WACHb,OAEL,CAACnB,IAGA,kBAACiC,EAAA,EAAD,CAAKC,UAAU,cAAcC,OAAQ9B,EAASH,KAAMC,EAASD,MACzD,kBAACkC,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,uDAEPjC,GACG,kBAACkC,EAAA,EAAD,CAAQL,UAAU,SAASM,SAAUnC,EAASf,KAAMF,GAChD,kBAACqD,EAAA,EAAD,KACKlC,GACG,6BACI,+CACsBA,EAAMiB,SAAU,IADtC,6CAE+C,IAC1CjB,EAAMmB,MAHX,gDAIkBnB,EAAMqB,WAJxB,QAWnB9B,GACGA,EAAiB4C,KAAI,SAACF,EAAUG,GAAX,OACjB,kBAACJ,EAAA,EAAD,CAAQC,SAAUA,EAAUI,IAAKD,EAAOrD,KAAMK,SCjGnDkD,EAJH,WACR,OAAO,kBAAC,EAAD,OCAXC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.a16cbfce.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport L from \"leaflet\";\r\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\r\n\r\nconst Icon = L.icon({\r\n    iconUrl: \"http://open-notify.org//Open-Notify-API/map/ISSIcon.png\",\r\n    iconSize: [50, 30],\r\n    iconAnchor: [25, 15],\r\n    popupAnchor: [0, -30],\r\n});\r\nconst Dot = L.icon({\r\n    iconUrl:\r\n        \"https://upload.wikimedia.org/wikipedia/commons/0/0e/Basic_red_dot.png\",\r\n    iconSize: [5, 5],\r\n    iconAnchor: [5, 5],\r\n    popupAnchor: [0, -30],\r\n});\r\n\r\nconst MapComp = () => {\r\n    const [previousLocation, setPreviousLocation] = useState([]);\r\n    const [issData, setissData] = useState();\r\n    const [location, setLocation] = useState({\r\n        zoom: 4,\r\n    });\r\n    const [markers, setMarkers] = useState();\r\n    const [popup, setPopup] = useState();\r\n\r\n    useEffect(() => {\r\n        const getData = async function () {\r\n            try {\r\n                const response = await fetch(\r\n                    \"https://api.wheretheiss.at/v1/satellites/25544\"\r\n                );\r\n                const issPos = await response.json();\r\n                setissData(issPos);\r\n            } catch (err) {\r\n                console.log(\"Opps\", err);\r\n            }\r\n        };\r\n\r\n        setInterval(function () {\r\n            getData();\r\n        }, 2500);\r\n    }, []);\r\n    useEffect(() => {\r\n        const checkInput = () => {\r\n            if (issData) {\r\n                setMarkers({\r\n                    lat: issData.latitude,\r\n                    lng: issData.longitude,\r\n                });\r\n                setLocation({\r\n                    location: {\r\n                        lat: issData.latitude,\r\n                        lng: issData.longitude,\r\n                    },\r\n                });\r\n                setPopup({\r\n                    altitude: issData.altitude.toFixed(2),\r\n                    speed: issData.velocity.toFixed(0),\r\n                    visibility: issData.visibility,\r\n                });\r\n            }\r\n        };\r\n        const previousLoc = function () {\r\n            if (issData) {\r\n                let currentLoc = {\r\n                    lat: issData.latitude,\r\n                    lng: issData.longitude,\r\n                    id: issData.timestamp,\r\n                };\r\n                setPreviousLocation([...previousLocation, currentLoc]);\r\n            }\r\n        };\r\n        checkInput();\r\n        previousLoc();\r\n        return () => {\r\n            checkInput();\r\n        };\r\n    }, [issData]);\r\n\r\n    return (\r\n        <Map className='map-wrapper' center={markers} zoom={location.zoom}>\r\n            <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n            />\r\n            {markers && (\r\n                <Marker className='marker' position={markers} icon={Icon}>\r\n                    <Popup>\r\n                        {popup && (\r\n                            <div>\r\n                                <p>\r\n                                    The ISS Craft is {popup.altitude}{\" \"}\r\n                                    Killometers above us, flying at a speed of{\" \"}\r\n                                    {popup.speed} Km/h. The ISS Space Station is\r\n                                    currently in {popup.visibility}.\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    </Popup>\r\n                </Marker>\r\n            )}\r\n            {previousLocation &&\r\n                previousLocation.map((position, index) => (\r\n                    <Marker position={position} key={index} icon={Dot}></Marker>\r\n                ))}\r\n        </Map>\r\n    );\r\n};\r\n\r\nexport default MapComp;\r\n","import React from \"react\";\nimport \"../node_modules/leaflet/dist/leaflet.css\";\nimport MapComp from \"./comps/MapComp\";\n\nconst App = () => {\n    return <MapComp />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}